<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
	<!-- <Properties> 태그 사용하여 각 로그 설정에서 사용할 속성값을 태그로 정의 -->
	<!-- <Property> 태그의 name 속성에 변수명처럼 사용할 이름 지정, 태그 사이에 속성값 지정 -->
	<Properties>
		<!-- layoutPattern 이라는 이름으로 로그 메세지 형식 문자열 패턴 지정 -->
		<Property name="layoutPattern">%d{yyyy-MM-dd HH:mm:ss} %-5p: [%c] - %m%n</Property>
	</Properties>

	<!-- Appender, Layout 설정 -->
	<!-- Appenders 태그 사용하여 로그를 출력할 대상 및 출력 형식 설정 -->
	<Appenders>
		<!-- 1) console 이라는 이름으로 이클립스 콘솔에 출력하기 위한 로그 형식을 지정 -->
		<Console name="console" target="SYSTEM_OUT">
			<!-- 로그 출력 형식을 5글자 심각도(%-5p)와 클래스명(%c)과 로그메세지(%m%n) 순으로 출력 -->
<!-- 			<PatternLayout pattern="%-5p: %c - %m%n" /> -->
			<!-- %d 를 지정하여 날짜 표시 가능(기본형식 : 2025-01-22 12:19:21,685) -->
<!-- 			<PatternLayout pattern="%d %-5p: %c - %m%n" /> -->
			<!-- 날짜 포맷 변경 시 %d{날짜 및 시각 포맷 지정} -->
<!-- 			<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %-5p: [%c] - %m%n" /> -->
			<!-- <Properties> 태그에서 지정한 <Property> 태그 항목을 패턴으로 지정 -->
			<!-- pattern 속성값으로 위에서 지정한 name 속성값을 ${name속성값} 형식으로 지정 -->
			<PatternLayout pattern="${layoutPattern}" />
		</Console>
		
		<!-- =============================================== -->
		<!-- 2) 로그 메세지를 외부 파일로 출력하기 위한 설정 -->
		<!-- 
		RollingFile Appender : 파일의 크기 또는 파일 백업 인덱스 등의 지정을 통해서
		특정 크기 이상으로 파일 크기가 커지거나 특정 기간을 지나면
		기존 파일(target)을 백업파일(history)로 바꾸고, 다시 새 target 파일에 로깅을 기록함 
		=> name 속성 : 로그 출력 대상 지정 시 사용할 이름
		   fileName 속성 : 로그 파일 중 기본 파일(target)의 위치 및 이름 지정
		   filePattern 속성 : 백업 파일의 위치 및 파일명의 패턴 지정
		=> 절대경로 사용 시(ex. d:/my_log/log.log) 해당 경로상에 로그 파일 생성됨
		=> 상대경로 사용 시 파일 위치는 기본적으로 PC 의 경우 이클립스 설치 폴더 기준이며
		   서버 상에서는 톰캣 디렉토리가 기준이 된다!
		   ex) ./my_log/log.log
		       PC : C:\STS3\sts-3.9.18.RELEASE\my_log\log.log
		       서버 : tomcat/my_log/log.log
		=> 기본적으로 롤링 파일 갯수는 현재 사용중인 파일 1개 + 백업 파일 7개 = 총 8개
		-->
		<RollingFile name="rollingFile"
						fileName="./my_log/rolling_log.log"
						filePattern="./my_log/rolling_log-%d{yyyy-MM-dd}%i.log">
			<!-- 파일에 출력할 로그메세지 형식(패턴) 지정 -->
<!-- 			<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %-5p: [%c] - %m%n" /> -->
			<PatternLayout pattern="${layoutPattern}" />
			
			<!-- <Policies> 태그 사이에 롤링 정책 설정 -->
			<Policies>
				<!-- SizeBasedTriggeringPolicy 태그 사용하여 파일 크기에 따른 롤링 설정 -->
				<SizeBasedTriggeringPolicy size="10MB" />
			</Policies>
		</RollingFile>
		
		<RollingFile name="rollingFileForSQL"
						fileName="./my_log/rolling_log_sql.log"
						filePattern="./my_log/rolling_log_sql-%d{yyyy-MM-dd}%i.log">
			<PatternLayout pattern="${layoutPattern}" />
			<Policies>
				<SizeBasedTriggeringPolicy size="10MB" />
			</Policies>
		</RollingFile>
		
	</Appenders>
	
	<!-- Logger 설정 -->
	<!-- Loggers 태그를 사용하여 로그를 관리할 대상 지정 -->
	<!-- 각 태그에 level 속성을 사용하여 심각도 지정, 태그 내부에 <AppenderRef> 태그의 ref 속성으로 출력 대상 지정 -->
	<!-- 로그 레벨(심각도) - TRACE < DEBUG < INFO < WARN < ERROR < FATAL -->
	<Loggers>
		<!-- Root Logger 설정 -->
		<!-- 기본 출력되는 시스템 로그를 담당하며, level 의 심각도 변경을 통해 로그 출력 범위 지정 가능 -->
		<Root level="WARN">
			<AppenderRef ref="console"></AppenderRef>
			<AppenderRef ref="rollingFile"></AppenderRef>
		</Root>
		
		<!-- 여기서부터 현재 프로젝트(애플리케이션) 내의 각 로그에 대한 레벨 설정 -->	
		<!-- Application Loggers -->
		<Logger name="com.itwillbs.mvc_board" level="INFO" additivity="false">
			<AppenderRef ref="console"></AppenderRef>
			<AppenderRef ref="rollingFile"></AppenderRef>
		</Logger>
		
		<!-- ================================================================= -->
		<!-- log4jdbc 를 활용한 SQL 로그 출력을 위해 SQL Logger 항목 설정 추가 -->
		<!-- 1. jdbc.sqlonly 로그 : SQL 쿼리 문장에 대한 로그(전달인자 포함한 전체 문장 출력해줌) -->
		<Logger name="jdbc.sqlonly" level="OFF" additivity="false">
			<AppenderRef ref="console"></AppenderRef>
		</Logger>

		<!-- 2. jdbc.sqltiming 로그 : sqlonly 로그 + 실행에 소용된 시간(밀리초)을 포함하는 로그 -->
		<Logger name="jdbc.sqltiming" level="INFO" additivity="false">
			<AppenderRef ref="console"></AppenderRef>
			<AppenderRef ref="rollingFileForSQL"></AppenderRef>
		</Logger>
		
		<!-- 3. jdbc.audit 로그 : JDBC 호출 정보에 대한 로그(ResultSet 결과 제외) => 내용 많음 -->
		<Logger name="jdbc.audit" level="OFF" additivity="false">
			<AppenderRef ref="console"></AppenderRef>
		</Logger>
		
		<!-- 4. jdbc.resultset 로그 : ResultSet 객체 내용을 포함한 JDBC 호출 정보에 대한 로그 => 내용 많음 -->
		<Logger name="jdbc.resultset" level="OFF" additivity="false">
			<AppenderRef ref="console"></AppenderRef>
		</Logger>
		
		<!-- 5. jdbc.resultsettable 로그 : SELECT 구문 실행 결과(데이터 테이블 = ResultSet 객체 내용) 에 대한 로그 -->
		<Logger name="jdbc.resultsettable" level="INFO" additivity="false">
			<AppenderRef ref="console"></AppenderRef>
			<AppenderRef ref="rollingFileForSQL"></AppenderRef>
		</Logger>
	</Loggers>
</Configuration>









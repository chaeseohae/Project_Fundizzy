<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	
	<!-- HikariCP 라이브러리 사용을 위한 설정(커넥션풀 설정) -->
	<!-- 1. HikariCP 를 활용한 DB 접속 정보 설정 위해 HikariConfig 객체 설정(JDBC 기본 설정) -->
	<!-- com.zaxxer.hikari 패키지의 HikariConfig 클래스 지정 및 속성 설정 -->
	<!-- 1) id 속성에 변수명처럼 사용할 속성명 기술, class 속성에 HiKariConfig 클래스 지정 -->
	<!-- 2) 태그 내부에 <property> 태그를 사용하여 JDBC 기본 정보 설정 -->
	<!-- name 속성은 고정값 사용, value 속성은 JDBC 에 사용되는 설정값 지정 -->
<!-- 	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig"> -->
<!-- 		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property> -->
<!-- 		<property name="jdbcUrl"         value="jdbc:mysql://localhost:3306/study_jsp5"></property> -->
<!-- 		<property name="username"        value="root"></property> -->
<!-- 		<property name="password"        value="1234"></property> -->
<!-- 	</bean> -->

	<!-- SQL 로그 출력을 위해 log4jdbc 라이브러리 관련 DBCP 정보 변경 필요(driverClassName, jdbcUrl 속성만 변경) -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- 드라이버클래스를 log4jdbc 라이브러리의 DriverSpy 클래스로 변경 -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<!-- DB 주소 정보의 프로토콜 부분도 jdbc:log4jdbc:mysql 형태로 변경 -->
		<!-- 외부 properties 파일로부터 속성값을 가져와서 DB 접속 정보에 전달 -->
		<!-- 주의! XML 파일에 properties 파일이 연결되어야 함 => 아래쪽에 설정되어 있음 -->
		<property name="jdbcUrl"         value="jdbc:log4jdbc:mysql://${db.host}/${db.db_name}"></property>
		<property name="username"        value="${db.username}"></property>
		<property name="password"        value="${db.password}"></property>
	</bean>
	
	<!-- 2. HikariCP 를 통해 커넥션을 관리하는 DataSource 객체(HikariDataSource) 설정 -->
	<!-- 생성자 파라미터로 1번에서 생성한 HikariConfig 객체 전달 -->
	<!-- 커넥션 객체 사용 완료 후 자동으로 close() 메서드 호출하여 커넥션풀에 객체 반환하기 위해 -->
	<!-- bean 태그의 destroy-method 속성값으로 "close" 지정 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>
	
	<!-- 3. Connection 객체 생성, 쿼리 전달 및 결과 리턴 등의 작업을 수행할 SQLSessionFactory 객체 설정 -->
	<!-- MyBatis - Spring 연결을 담당하며, 내부적으로 SQLSession 객체를 통해 작업 수행 -->
	<!-- 
	주의!
	1. 이전에 이미 DataSource 객체 설정이 완료되어 있어야 함
	2. <bean> 태그의 id 값, class 값은 고정
	3. <property> 태그의 dataSource, configLocation, mapperLocations 이름(name 속성값) 고정 
	4. configLocation, mapperLocations 속성(항목)에 지정된 각각의 파일(xml)이 실제 위치에 생성되어 있어야 함
	   (설정 항목 중 classpath 가 가리키는 기본 위치 : src/main/resources 패키지)
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/config/mybatis-config.xml"></property>
		<!-- Mapper XML 파일은 복수개의 파일을 연결하기 위해 *Mapper.xml 형태로 지정(StudentMapper.xml, ProductMapper.xml 등 모두 포함됨) -->
		<property name="mapperLocations" value="classpath:/com/itwillbs/project_fundizzy/mapper/*Mapper.xml"></property>
	</bean>
			
	<!-- 4. MyBatis 연동에 사용될 객체(클래스)들의 패키지 위치 지정(기본 루트 패키지 지정) -->
	<!-- 이 설정이 없을 경우 3번과 관련된 객체(XXXMapper.java 등) 불러올 수 없다!! -->
	<mybatis-spring:scan base-package="com.itwillbs.project_fundizzy"/>
	
	<!-- 5. 트랜잭션 설정(마이바티스가 commit, rollback 여부를 직접 결정하여 수행하도록 함) -->
	<!-- 5-1) <bean> 태그를 사용하여 DataSourceTransactionManager 객체 설정 -->
	<!-- id 속성값 및 class 속성값 설정(class 속성값은 DataSourceTransactionManager 클래스 지정) -->
	<!-- <bean> 태그 내부에 <property> 태그에 2번 과정에서 생성한 DataSource 객체의 id 속성값 지정 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 5-2) <tx:annotation-driven> 태그를 통해 5-1 과정에서 생성한 트랜잭션 관리 객체 지정 -->
	<!-- namespace 탭에서 tx 항목 추가 필요 -->
	<!-- transaction-manager 속성값으로 5-1 의 <bean> 태그의 id 속성값 지정 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- 트랜잭션 처리가 필요한 클래스(주로, Service 클래스)에서 @Transactional 어노테이션 사용 -->
	
	<!-- ================================================================================== -->
	<!-- servlet-context.xml 에서 스프링 빈으로 관리할 패키지를 특정 패키지만 명시했을 경우 -->
	<!-- ex) <context:component-scan base-package="com.itwillbs.mvc_board.controller" /> -->
	<!-- 나머지 웹과 관련없는 클래스들을 root-context.xml 에서 별도로 등록해야한다! -->
	<!-- 이 때, <context:xxx> 태그 사용하려면 namespaces 탭에서 context 항목 추가 필요 -->
	<context:component-scan base-package="com.itwillbs.project_fundizzy.service"></context:component-scan>
	<context:component-scan base-package="com.itwillbs.project_fundizzy.handler"></context:component-scan>
	<!-- ================================================================================== -->
	<context:component-scan base-package="com.itwillbs.project_fundizzy.aop"></context:component-scan>
	
	<!-- AOP 오토 프록시(Auto Proxy) 기능을 통해 객체 생성을 위한 태그 추가 -->
	<!-- 스캔 대상 패키지 내의 객체들만을 대상으로 프록시 객체가 생성됨 -->
	<!-- 주의! 만약, Controller 클래스들에서도 AOP 사용하려면 servlet-context.xml 파일에 오토프록시 설정 추가 -->
	<!-- namespaces 탭에서 [aop] 항목 추가 필요 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- 
	애플리케이션 내에서 사용할 데이터(= 속성값)들을 직접 소스코드에 하드코딩하는 대신
	외부 파일에 속성값들을 저장한 후 스프링 내에서 접근하기 위해
	해당 파일을 XML 파일(root-context.xml 또는 servlet-context.xml)에 등록해야한다!
	<context:property-placeholder /> 태그 내의 location 속성값에 프로퍼티 파일 지정하면 된다!
	=> location 속성값에 지정할 파일의 경로 중에서 src/main/resources/ 부분은 classpath:/ 로 대체
	=> 여기에서 지정한 파일은 XML 파일 및 스프링 빈에서 접근 가능
	   - 스프링 빈 클래스에서는 @Value 어노테이션으로 속성값 접근 가능
	   - XML 파일에서는 ${속성명} 형태로 접근 가능
	-->
	<context:property-placeholder location="classpath:/config/application.properties" />
	
</beans>













